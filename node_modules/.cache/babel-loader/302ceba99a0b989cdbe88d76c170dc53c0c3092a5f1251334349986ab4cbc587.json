{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Particle = void 0;\nconst ParticlesOptions_1 = require(\"../Options/Classes/Particles/ParticlesOptions\");\nconst Shape_1 = require(\"../Options/Classes/Particles/Shape/Shape\");\nconst Enums_1 = require(\"../Enums\");\nconst Utils_1 = require(\"../Utils\");\nconst Vector_1 = require(\"./Particle/Vector\");\nconst Vector3d_1 = require(\"./Particle/Vector3d\");\nconst fixOutMode = data => {\n  if ((0, Utils_1.isInArray)(data.outMode, data.checkModes) || (0, Utils_1.isInArray)(data.outMode, data.checkModes)) {\n    if (data.coord > data.maxCoord - data.radius * 2) {\n      data.setCb(-data.radius);\n    } else if (data.coord < data.radius * 2) {\n      data.setCb(data.radius);\n    }\n  }\n};\nclass Particle {\n  constructor(id, container, position, overrideOptions, group) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n    this.id = id;\n    this.container = container;\n    this.group = group;\n    this.fill = true;\n    this.close = true;\n    this.lastPathTime = 0;\n    this.destroyed = false;\n    this.unbreakable = false;\n    this.splitCount = 0;\n    this.misplaced = false;\n    this.retina = {\n      maxDistance: {}\n    };\n    const pxRatio = container.retina.pixelRatio;\n    const mainOptions = container.actualOptions;\n    const particlesOptions = new ParticlesOptions_1.ParticlesOptions();\n    particlesOptions.load(mainOptions.particles);\n    const shapeType = particlesOptions.shape.type;\n    const reduceDuplicates = particlesOptions.reduceDuplicates;\n    this.shape = shapeType instanceof Array ? (0, Utils_1.itemFromArray)(shapeType, this.id, reduceDuplicates) : shapeType;\n    if (overrideOptions === null || overrideOptions === void 0 ? void 0 : overrideOptions.shape) {\n      if (overrideOptions.shape.type) {\n        const overrideShapeType = overrideOptions.shape.type;\n        this.shape = overrideShapeType instanceof Array ? (0, Utils_1.itemFromArray)(overrideShapeType, this.id, reduceDuplicates) : overrideShapeType;\n      }\n      const shapeOptions = new Shape_1.Shape();\n      shapeOptions.load(overrideOptions.shape);\n      if (this.shape) {\n        this.shapeData = this.loadShapeData(shapeOptions, reduceDuplicates);\n      }\n    } else {\n      this.shapeData = this.loadShapeData(particlesOptions.shape, reduceDuplicates);\n    }\n    if (overrideOptions !== undefined) {\n      particlesOptions.load(overrideOptions);\n    }\n    if (((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles) !== undefined) {\n      particlesOptions.load((_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.particles);\n    }\n    this.fill = (_d = (_c = this.shapeData) === null || _c === void 0 ? void 0 : _c.fill) !== null && _d !== void 0 ? _d : this.fill;\n    this.close = (_f = (_e = this.shapeData) === null || _e === void 0 ? void 0 : _e.close) !== null && _f !== void 0 ? _f : this.close;\n    this.options = particlesOptions;\n    this.pathDelay = (0, Utils_1.getValue)(this.options.move.path.delay) * 1000;\n    const zIndexValue = (0, Utils_1.getRangeValue)(this.options.zIndex.value);\n    container.retina.initParticle(this);\n    const sizeOptions = this.options.size,\n      sizeRange = sizeOptions.value;\n    this.size = {\n      enable: sizeOptions.animation.enable,\n      value: (0, Utils_1.getValue)(sizeOptions) * container.retina.pixelRatio,\n      max: (0, Utils_1.getRangeMax)(sizeRange) * pxRatio,\n      min: (0, Utils_1.getRangeMin)(sizeRange) * pxRatio,\n      loops: 0,\n      maxLoops: sizeOptions.animation.count\n    };\n    const sizeAnimation = sizeOptions.animation;\n    if (sizeAnimation.enable) {\n      this.size.status = Enums_1.AnimationStatus.increasing;\n      switch (sizeAnimation.startValue) {\n        case Enums_1.StartValueType.min:\n          this.size.value = this.size.min;\n          this.size.status = Enums_1.AnimationStatus.increasing;\n          break;\n        case Enums_1.StartValueType.random:\n          this.size.value = (0, Utils_1.randomInRange)(this.size) * pxRatio;\n          this.size.status = Math.random() >= 0.5 ? Enums_1.AnimationStatus.increasing : Enums_1.AnimationStatus.decreasing;\n          break;\n        case Enums_1.StartValueType.max:\n        default:\n          this.size.value = this.size.max;\n          this.size.status = Enums_1.AnimationStatus.decreasing;\n          break;\n      }\n      this.size.velocity = ((_g = this.retina.sizeAnimationSpeed) !== null && _g !== void 0 ? _g : container.retina.sizeAnimationSpeed) / 100 * container.retina.reduceFactor;\n      if (!sizeAnimation.sync) {\n        this.size.velocity *= Math.random();\n      }\n    }\n    this.direction = (0, Utils_1.getParticleDirectionAngle)(this.options.move.direction);\n    this.bubble = {\n      inRange: false\n    };\n    this.initialVelocity = this.calculateVelocity();\n    this.velocity = this.initialVelocity.copy();\n    this.moveDecay = 1 - (0, Utils_1.getRangeValue)(this.options.move.decay);\n    this.position = this.calcPosition(container, position, (0, Utils_1.clamp)(zIndexValue, 0, container.zLayers));\n    this.initialPosition = this.position.copy();\n    this.offset = Vector_1.Vector.origin;\n    const particles = container.particles;\n    particles.needsSort = particles.needsSort || particles.lastZIndex < this.position.z;\n    particles.lastZIndex = this.position.z;\n    this.zIndexFactor = this.position.z / container.zLayers;\n    this.sides = 24;\n    let drawer = container.drawers.get(this.shape);\n    if (!drawer) {\n      drawer = Utils_1.Plugins.getShapeDrawer(this.shape);\n      if (drawer) {\n        container.drawers.set(this.shape, drawer);\n      }\n    }\n    if (drawer === null || drawer === void 0 ? void 0 : drawer.loadShape) {\n      drawer === null || drawer === void 0 ? void 0 : drawer.loadShape(this);\n    }\n    const sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\n    if (sideCountFunc) {\n      this.sides = sideCountFunc(this);\n    }\n    this.life = this.loadLife();\n    this.spawning = this.life.delay > 0;\n    if (this.options.move.spin.enable) {\n      const spinPos = (_h = this.options.move.spin.position) !== null && _h !== void 0 ? _h : {\n        x: 50,\n        y: 50\n      };\n      const spinCenter = {\n        x: spinPos.x / 100 * container.canvas.size.width,\n        y: spinPos.y / 100 * container.canvas.size.height\n      };\n      const pos = this.getPosition();\n      const distance = (0, Utils_1.getDistance)(pos, spinCenter);\n      this.spin = {\n        center: spinCenter,\n        direction: this.velocity.x >= 0 ? Enums_1.RotateDirection.clockwise : Enums_1.RotateDirection.counterClockwise,\n        angle: this.velocity.angle,\n        radius: distance,\n        acceleration: (_j = this.retina.spinAcceleration) !== null && _j !== void 0 ? _j : (0, Utils_1.getRangeValue)(this.options.move.spin.acceleration)\n      };\n    }\n    this.shadowColor = (0, Utils_1.colorToRgb)(this.options.shadow.color);\n    for (const updater of container.particles.updaters) {\n      if (updater.init) {\n        updater.init(this);\n      }\n    }\n    if (drawer && drawer.particleInit) {\n      drawer.particleInit(container, this);\n    }\n    for (const [, plugin] of container.plugins) {\n      if (plugin.particleCreated) {\n        plugin.particleCreated(this);\n      }\n    }\n  }\n  isVisible() {\n    return !this.destroyed && !this.spawning && this.isInsideCanvas();\n  }\n  isInsideCanvas() {\n    const radius = this.getRadius();\n    const canvasSize = this.container.canvas.size;\n    return this.position.x >= -radius && this.position.y >= -radius && this.position.y <= canvasSize.height + radius && this.position.x <= canvasSize.width + radius;\n  }\n  draw(delta) {\n    const container = this.container;\n    for (const [, plugin] of container.plugins) {\n      container.canvas.drawParticlePlugin(plugin, this, delta);\n    }\n    container.canvas.drawParticle(this, delta);\n  }\n  getPosition() {\n    return {\n      x: this.position.x + this.offset.x,\n      y: this.position.y + this.offset.y,\n      z: this.position.z\n    };\n  }\n  getRadius() {\n    var _a;\n    return (_a = this.bubble.radius) !== null && _a !== void 0 ? _a : this.size.value;\n  }\n  getMass() {\n    return this.getRadius() ** 2 * Math.PI / 2;\n  }\n  getFillColor() {\n    var _a, _b, _c;\n    const color = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : (0, Utils_1.getHslFromAnimation)(this.color);\n    if (color && this.roll && (this.backColor || this.roll.alter)) {\n      const rolled = Math.floor(((_c = (_b = this.roll) === null || _b === void 0 ? void 0 : _b.angle) !== null && _c !== void 0 ? _c : 0) / (Math.PI / 2)) % 2;\n      if (rolled) {\n        if (this.backColor) {\n          return this.backColor;\n        }\n        if (this.roll.alter) {\n          return (0, Utils_1.alterHsl)(color, this.roll.alter.type, this.roll.alter.value);\n        }\n      }\n    }\n    return color;\n  }\n  getStrokeColor() {\n    var _a, _b;\n    return (_b = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : (0, Utils_1.getHslFromAnimation)(this.strokeColor)) !== null && _b !== void 0 ? _b : this.getFillColor();\n  }\n  destroy(override) {\n    this.destroyed = true;\n    this.bubble.inRange = false;\n    if (this.unbreakable) {\n      return;\n    }\n    this.destroyed = true;\n    this.bubble.inRange = false;\n    for (const [, plugin] of this.container.plugins) {\n      if (plugin.particleDestroyed) {\n        plugin.particleDestroyed(this, override);\n      }\n    }\n    if (override) {\n      return;\n    }\n    const destroyOptions = this.options.destroy;\n    if (destroyOptions.mode === Enums_1.DestroyMode.split) {\n      this.split();\n    }\n  }\n  reset() {\n    if (this.opacity) {\n      this.opacity.loops = 0;\n    }\n    this.size.loops = 0;\n  }\n  split() {\n    const splitOptions = this.options.destroy.split;\n    if (splitOptions.count >= 0 && this.splitCount++ > splitOptions.count) {\n      return;\n    }\n    const rate = (0, Utils_1.getRangeValue)(splitOptions.rate.value);\n    for (let i = 0; i < rate; i++) {\n      this.container.particles.addSplitParticle(this);\n    }\n  }\n  calcPosition(container, position, zIndex, tryCount = 0) {\n    var _a, _b, _c, _d, _e, _f;\n    for (const [, plugin] of container.plugins) {\n      const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n      if (pluginPos !== undefined) {\n        return Vector3d_1.Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n      }\n    }\n    const canvasSize = container.canvas.size;\n    const pos = Vector3d_1.Vector3d.create((_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width, (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height, zIndex);\n    const radius = this.getRadius();\n    const outModes = this.options.move.outModes,\n      fixHorizontal = outMode => {\n        fixOutMode({\n          outMode,\n          checkModes: [Enums_1.OutMode.bounce, Enums_1.OutMode.bounceHorizontal],\n          coord: pos.x,\n          maxCoord: container.canvas.size.width,\n          setCb: value => pos.x += value,\n          radius\n        });\n      },\n      fixVertical = outMode => {\n        fixOutMode({\n          outMode,\n          checkModes: [Enums_1.OutMode.bounce, Enums_1.OutMode.bounceVertical],\n          coord: pos.y,\n          maxCoord: container.canvas.size.height,\n          setCb: value => pos.y += value,\n          radius\n        });\n      };\n    fixHorizontal((_c = outModes.left) !== null && _c !== void 0 ? _c : outModes.default);\n    fixHorizontal((_d = outModes.right) !== null && _d !== void 0 ? _d : outModes.default);\n    fixVertical((_e = outModes.top) !== null && _e !== void 0 ? _e : outModes.default);\n    fixVertical((_f = outModes.bottom) !== null && _f !== void 0 ? _f : outModes.default);\n    if (this.checkOverlap(pos, tryCount)) {\n      return this.calcPosition(container, undefined, zIndex, tryCount + 1);\n    }\n    return pos;\n  }\n  checkOverlap(pos, tryCount = 0) {\n    const collisionsOptions = this.options.collisions;\n    const radius = this.getRadius();\n    if (!collisionsOptions.enable) {\n      return false;\n    }\n    const overlapOptions = collisionsOptions.overlap;\n    if (overlapOptions.enable) {\n      return false;\n    }\n    const retries = overlapOptions.retries;\n    if (retries >= 0 && tryCount > retries) {\n      throw new Error(\"Particle is overlapping and can't be placed\");\n    }\n    let overlaps = false;\n    for (const particle of this.container.particles.array) {\n      if ((0, Utils_1.getDistance)(pos, particle.position) < radius + particle.getRadius()) {\n        overlaps = true;\n        break;\n      }\n    }\n    return overlaps;\n  }\n  calculateVelocity() {\n    const baseVelocity = (0, Utils_1.getParticleBaseVelocity)(this.direction);\n    const res = baseVelocity.copy();\n    const moveOptions = this.options.move;\n    const rad = Math.PI / 180 * moveOptions.angle.value;\n    const radOffset = Math.PI / 180 * moveOptions.angle.offset;\n    const range = {\n      left: radOffset - rad / 2,\n      right: radOffset + rad / 2\n    };\n    if (!moveOptions.straight) {\n      res.angle += (0, Utils_1.randomInRange)((0, Utils_1.setRangeValue)(range.left, range.right));\n    }\n    if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n      res.length *= Math.random();\n    }\n    return res;\n  }\n  loadShapeData(shapeOptions, reduceDuplicates) {\n    const shapeData = shapeOptions.options[this.shape];\n    if (shapeData) {\n      return (0, Utils_1.deepExtend)({}, shapeData instanceof Array ? (0, Utils_1.itemFromArray)(shapeData, this.id, reduceDuplicates) : shapeData);\n    }\n  }\n  loadLife() {\n    const container = this.container;\n    const particlesOptions = this.options;\n    const lifeOptions = particlesOptions.life;\n    const life = {\n      delay: container.retina.reduceFactor ? (0, Utils_1.getRangeValue)(lifeOptions.delay.value) * (lifeOptions.delay.sync ? 1 : Math.random()) / container.retina.reduceFactor * 1000 : 0,\n      delayTime: 0,\n      duration: container.retina.reduceFactor ? (0, Utils_1.getRangeValue)(lifeOptions.duration.value) * (lifeOptions.duration.sync ? 1 : Math.random()) / container.retina.reduceFactor * 1000 : 0,\n      time: 0,\n      count: particlesOptions.life.count\n    };\n    if (life.duration <= 0) {\n      life.duration = -1;\n    }\n    if (life.count <= 0) {\n      life.count = -1;\n    }\n    return life;\n  }\n}\nexports.Particle = Particle;","map":{"version":3,"names":["Object","defineProperty","exports","value","Particle","ParticlesOptions_1","require","Shape_1","Enums_1","Utils_1","Vector_1","Vector3d_1","fixOutMode","data","isInArray","outMode","checkModes","coord","maxCoord","radius","setCb","constructor","id","container","position","overrideOptions","group","_a","_b","_c","_d","_e","_f","_g","_h","_j","fill","close","lastPathTime","destroyed","unbreakable","splitCount","misplaced","retina","maxDistance","pxRatio","pixelRatio","mainOptions","actualOptions","particlesOptions","ParticlesOptions","load","particles","shapeType","shape","type","reduceDuplicates","Array","itemFromArray","overrideShapeType","shapeOptions","Shape","shapeData","loadShapeData","undefined","options","pathDelay","getValue","move","path","delay","zIndexValue","getRangeValue","zIndex","initParticle","sizeOptions","size","sizeRange","enable","animation","max","getRangeMax","min","getRangeMin","loops","maxLoops","count","sizeAnimation","status","AnimationStatus","increasing","startValue","StartValueType","random","randomInRange","Math","decreasing","velocity","sizeAnimationSpeed","reduceFactor","sync","direction","getParticleDirectionAngle","bubble","inRange","initialVelocity","calculateVelocity","copy","moveDecay","decay","calcPosition","clamp","zLayers","initialPosition","offset","Vector","origin","needsSort","lastZIndex","z","zIndexFactor","sides","drawer","drawers","get","Plugins","getShapeDrawer","set","loadShape","sideCountFunc","getSidesCount","life","loadLife","spawning","spin","spinPos","x","y","spinCenter","canvas","width","height","pos","getPosition","distance","getDistance","center","RotateDirection","clockwise","counterClockwise","angle","acceleration","spinAcceleration","shadowColor","colorToRgb","shadow","color","updater","updaters","init","particleInit","plugin","plugins","particleCreated","isVisible","isInsideCanvas","getRadius","canvasSize","draw","delta","drawParticlePlugin","drawParticle","getMass","PI","getFillColor","getHslFromAnimation","roll","backColor","alter","rolled","floor","alterHsl","getStrokeColor","strokeColor","destroy","override","particleDestroyed","destroyOptions","mode","DestroyMode","split","reset","opacity","splitOptions","rate","i","addSplitParticle","tryCount","pluginPos","particlePosition","Vector3d","create","outModes","fixHorizontal","OutMode","bounce","bounceHorizontal","fixVertical","bounceVertical","left","default","right","top","bottom","checkOverlap","collisionsOptions","collisions","overlapOptions","overlap","retries","Error","overlaps","particle","array","baseVelocity","getParticleBaseVelocity","res","moveOptions","rad","radOffset","range","straight","setRangeValue","speed","length","deepExtend","lifeOptions","delayTime","duration","time"],"sources":["C:/Users/peswa/Desktop/portfolio/My-portfolio/node_modules/tsparticles/Core/Particle.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Particle = void 0;\nconst ParticlesOptions_1 = require(\"../Options/Classes/Particles/ParticlesOptions\");\nconst Shape_1 = require(\"../Options/Classes/Particles/Shape/Shape\");\nconst Enums_1 = require(\"../Enums\");\nconst Utils_1 = require(\"../Utils\");\nconst Vector_1 = require(\"./Particle/Vector\");\nconst Vector3d_1 = require(\"./Particle/Vector3d\");\nconst fixOutMode = (data) => {\n    if ((0, Utils_1.isInArray)(data.outMode, data.checkModes) || (0, Utils_1.isInArray)(data.outMode, data.checkModes)) {\n        if (data.coord > data.maxCoord - data.radius * 2) {\n            data.setCb(-data.radius);\n        }\n        else if (data.coord < data.radius * 2) {\n            data.setCb(data.radius);\n        }\n    }\n};\nclass Particle {\n    constructor(id, container, position, overrideOptions, group) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        this.id = id;\n        this.container = container;\n        this.group = group;\n        this.fill = true;\n        this.close = true;\n        this.lastPathTime = 0;\n        this.destroyed = false;\n        this.unbreakable = false;\n        this.splitCount = 0;\n        this.misplaced = false;\n        this.retina = {\n            maxDistance: {},\n        };\n        const pxRatio = container.retina.pixelRatio;\n        const mainOptions = container.actualOptions;\n        const particlesOptions = new ParticlesOptions_1.ParticlesOptions();\n        particlesOptions.load(mainOptions.particles);\n        const shapeType = particlesOptions.shape.type;\n        const reduceDuplicates = particlesOptions.reduceDuplicates;\n        this.shape = shapeType instanceof Array ? (0, Utils_1.itemFromArray)(shapeType, this.id, reduceDuplicates) : shapeType;\n        if (overrideOptions === null || overrideOptions === void 0 ? void 0 : overrideOptions.shape) {\n            if (overrideOptions.shape.type) {\n                const overrideShapeType = overrideOptions.shape.type;\n                this.shape =\n                    overrideShapeType instanceof Array\n                        ? (0, Utils_1.itemFromArray)(overrideShapeType, this.id, reduceDuplicates)\n                        : overrideShapeType;\n            }\n            const shapeOptions = new Shape_1.Shape();\n            shapeOptions.load(overrideOptions.shape);\n            if (this.shape) {\n                this.shapeData = this.loadShapeData(shapeOptions, reduceDuplicates);\n            }\n        }\n        else {\n            this.shapeData = this.loadShapeData(particlesOptions.shape, reduceDuplicates);\n        }\n        if (overrideOptions !== undefined) {\n            particlesOptions.load(overrideOptions);\n        }\n        if (((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles) !== undefined) {\n            particlesOptions.load((_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.particles);\n        }\n        this.fill = (_d = (_c = this.shapeData) === null || _c === void 0 ? void 0 : _c.fill) !== null && _d !== void 0 ? _d : this.fill;\n        this.close = (_f = (_e = this.shapeData) === null || _e === void 0 ? void 0 : _e.close) !== null && _f !== void 0 ? _f : this.close;\n        this.options = particlesOptions;\n        this.pathDelay = (0, Utils_1.getValue)(this.options.move.path.delay) * 1000;\n        const zIndexValue = (0, Utils_1.getRangeValue)(this.options.zIndex.value);\n        container.retina.initParticle(this);\n        const sizeOptions = this.options.size, sizeRange = sizeOptions.value;\n        this.size = {\n            enable: sizeOptions.animation.enable,\n            value: (0, Utils_1.getValue)(sizeOptions) * container.retina.pixelRatio,\n            max: (0, Utils_1.getRangeMax)(sizeRange) * pxRatio,\n            min: (0, Utils_1.getRangeMin)(sizeRange) * pxRatio,\n            loops: 0,\n            maxLoops: sizeOptions.animation.count,\n        };\n        const sizeAnimation = sizeOptions.animation;\n        if (sizeAnimation.enable) {\n            this.size.status = Enums_1.AnimationStatus.increasing;\n            switch (sizeAnimation.startValue) {\n                case Enums_1.StartValueType.min:\n                    this.size.value = this.size.min;\n                    this.size.status = Enums_1.AnimationStatus.increasing;\n                    break;\n                case Enums_1.StartValueType.random:\n                    this.size.value = (0, Utils_1.randomInRange)(this.size) * pxRatio;\n                    this.size.status = Math.random() >= 0.5 ? Enums_1.AnimationStatus.increasing : Enums_1.AnimationStatus.decreasing;\n                    break;\n                case Enums_1.StartValueType.max:\n                default:\n                    this.size.value = this.size.max;\n                    this.size.status = Enums_1.AnimationStatus.decreasing;\n                    break;\n            }\n            this.size.velocity =\n                (((_g = this.retina.sizeAnimationSpeed) !== null && _g !== void 0 ? _g : container.retina.sizeAnimationSpeed) / 100) *\n                    container.retina.reduceFactor;\n            if (!sizeAnimation.sync) {\n                this.size.velocity *= Math.random();\n            }\n        }\n        this.direction = (0, Utils_1.getParticleDirectionAngle)(this.options.move.direction);\n        this.bubble = {\n            inRange: false,\n        };\n        this.initialVelocity = this.calculateVelocity();\n        this.velocity = this.initialVelocity.copy();\n        this.moveDecay = 1 - (0, Utils_1.getRangeValue)(this.options.move.decay);\n        this.position = this.calcPosition(container, position, (0, Utils_1.clamp)(zIndexValue, 0, container.zLayers));\n        this.initialPosition = this.position.copy();\n        this.offset = Vector_1.Vector.origin;\n        const particles = container.particles;\n        particles.needsSort = particles.needsSort || particles.lastZIndex < this.position.z;\n        particles.lastZIndex = this.position.z;\n        this.zIndexFactor = this.position.z / container.zLayers;\n        this.sides = 24;\n        let drawer = container.drawers.get(this.shape);\n        if (!drawer) {\n            drawer = Utils_1.Plugins.getShapeDrawer(this.shape);\n            if (drawer) {\n                container.drawers.set(this.shape, drawer);\n            }\n        }\n        if (drawer === null || drawer === void 0 ? void 0 : drawer.loadShape) {\n            drawer === null || drawer === void 0 ? void 0 : drawer.loadShape(this);\n        }\n        const sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\n        if (sideCountFunc) {\n            this.sides = sideCountFunc(this);\n        }\n        this.life = this.loadLife();\n        this.spawning = this.life.delay > 0;\n        if (this.options.move.spin.enable) {\n            const spinPos = (_h = this.options.move.spin.position) !== null && _h !== void 0 ? _h : { x: 50, y: 50 };\n            const spinCenter = {\n                x: (spinPos.x / 100) * container.canvas.size.width,\n                y: (spinPos.y / 100) * container.canvas.size.height,\n            };\n            const pos = this.getPosition();\n            const distance = (0, Utils_1.getDistance)(pos, spinCenter);\n            this.spin = {\n                center: spinCenter,\n                direction: this.velocity.x >= 0 ? Enums_1.RotateDirection.clockwise : Enums_1.RotateDirection.counterClockwise,\n                angle: this.velocity.angle,\n                radius: distance,\n                acceleration: (_j = this.retina.spinAcceleration) !== null && _j !== void 0 ? _j : (0, Utils_1.getRangeValue)(this.options.move.spin.acceleration),\n            };\n        }\n        this.shadowColor = (0, Utils_1.colorToRgb)(this.options.shadow.color);\n        for (const updater of container.particles.updaters) {\n            if (updater.init) {\n                updater.init(this);\n            }\n        }\n        if (drawer && drawer.particleInit) {\n            drawer.particleInit(container, this);\n        }\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particleCreated) {\n                plugin.particleCreated(this);\n            }\n        }\n    }\n    isVisible() {\n        return !this.destroyed && !this.spawning && this.isInsideCanvas();\n    }\n    isInsideCanvas() {\n        const radius = this.getRadius();\n        const canvasSize = this.container.canvas.size;\n        return (this.position.x >= -radius &&\n            this.position.y >= -radius &&\n            this.position.y <= canvasSize.height + radius &&\n            this.position.x <= canvasSize.width + radius);\n    }\n    draw(delta) {\n        const container = this.container;\n        for (const [, plugin] of container.plugins) {\n            container.canvas.drawParticlePlugin(plugin, this, delta);\n        }\n        container.canvas.drawParticle(this, delta);\n    }\n    getPosition() {\n        return {\n            x: this.position.x + this.offset.x,\n            y: this.position.y + this.offset.y,\n            z: this.position.z,\n        };\n    }\n    getRadius() {\n        var _a;\n        return (_a = this.bubble.radius) !== null && _a !== void 0 ? _a : this.size.value;\n    }\n    getMass() {\n        return (this.getRadius() ** 2 * Math.PI) / 2;\n    }\n    getFillColor() {\n        var _a, _b, _c;\n        const color = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : (0, Utils_1.getHslFromAnimation)(this.color);\n        if (color && this.roll && (this.backColor || this.roll.alter)) {\n            const rolled = Math.floor(((_c = (_b = this.roll) === null || _b === void 0 ? void 0 : _b.angle) !== null && _c !== void 0 ? _c : 0) / (Math.PI / 2)) % 2;\n            if (rolled) {\n                if (this.backColor) {\n                    return this.backColor;\n                }\n                if (this.roll.alter) {\n                    return (0, Utils_1.alterHsl)(color, this.roll.alter.type, this.roll.alter.value);\n                }\n            }\n        }\n        return color;\n    }\n    getStrokeColor() {\n        var _a, _b;\n        return (_b = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : (0, Utils_1.getHslFromAnimation)(this.strokeColor)) !== null && _b !== void 0 ? _b : this.getFillColor();\n    }\n    destroy(override) {\n        this.destroyed = true;\n        this.bubble.inRange = false;\n        if (this.unbreakable) {\n            return;\n        }\n        this.destroyed = true;\n        this.bubble.inRange = false;\n        for (const [, plugin] of this.container.plugins) {\n            if (plugin.particleDestroyed) {\n                plugin.particleDestroyed(this, override);\n            }\n        }\n        if (override) {\n            return;\n        }\n        const destroyOptions = this.options.destroy;\n        if (destroyOptions.mode === Enums_1.DestroyMode.split) {\n            this.split();\n        }\n    }\n    reset() {\n        if (this.opacity) {\n            this.opacity.loops = 0;\n        }\n        this.size.loops = 0;\n    }\n    split() {\n        const splitOptions = this.options.destroy.split;\n        if (splitOptions.count >= 0 && this.splitCount++ > splitOptions.count) {\n            return;\n        }\n        const rate = (0, Utils_1.getRangeValue)(splitOptions.rate.value);\n        for (let i = 0; i < rate; i++) {\n            this.container.particles.addSplitParticle(this);\n        }\n    }\n    calcPosition(container, position, zIndex, tryCount = 0) {\n        var _a, _b, _c, _d, _e, _f;\n        for (const [, plugin] of container.plugins) {\n            const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n            if (pluginPos !== undefined) {\n                return Vector3d_1.Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n            }\n        }\n        const canvasSize = container.canvas.size;\n        const pos = Vector3d_1.Vector3d.create((_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width, (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height, zIndex);\n        const radius = this.getRadius();\n        const outModes = this.options.move.outModes, fixHorizontal = (outMode) => {\n            fixOutMode({\n                outMode,\n                checkModes: [Enums_1.OutMode.bounce, Enums_1.OutMode.bounceHorizontal],\n                coord: pos.x,\n                maxCoord: container.canvas.size.width,\n                setCb: (value) => (pos.x += value),\n                radius,\n            });\n        }, fixVertical = (outMode) => {\n            fixOutMode({\n                outMode,\n                checkModes: [Enums_1.OutMode.bounce, Enums_1.OutMode.bounceVertical],\n                coord: pos.y,\n                maxCoord: container.canvas.size.height,\n                setCb: (value) => (pos.y += value),\n                radius,\n            });\n        };\n        fixHorizontal((_c = outModes.left) !== null && _c !== void 0 ? _c : outModes.default);\n        fixHorizontal((_d = outModes.right) !== null && _d !== void 0 ? _d : outModes.default);\n        fixVertical((_e = outModes.top) !== null && _e !== void 0 ? _e : outModes.default);\n        fixVertical((_f = outModes.bottom) !== null && _f !== void 0 ? _f : outModes.default);\n        if (this.checkOverlap(pos, tryCount)) {\n            return this.calcPosition(container, undefined, zIndex, tryCount + 1);\n        }\n        return pos;\n    }\n    checkOverlap(pos, tryCount = 0) {\n        const collisionsOptions = this.options.collisions;\n        const radius = this.getRadius();\n        if (!collisionsOptions.enable) {\n            return false;\n        }\n        const overlapOptions = collisionsOptions.overlap;\n        if (overlapOptions.enable) {\n            return false;\n        }\n        const retries = overlapOptions.retries;\n        if (retries >= 0 && tryCount > retries) {\n            throw new Error(\"Particle is overlapping and can't be placed\");\n        }\n        let overlaps = false;\n        for (const particle of this.container.particles.array) {\n            if ((0, Utils_1.getDistance)(pos, particle.position) < radius + particle.getRadius()) {\n                overlaps = true;\n                break;\n            }\n        }\n        return overlaps;\n    }\n    calculateVelocity() {\n        const baseVelocity = (0, Utils_1.getParticleBaseVelocity)(this.direction);\n        const res = baseVelocity.copy();\n        const moveOptions = this.options.move;\n        const rad = (Math.PI / 180) * moveOptions.angle.value;\n        const radOffset = (Math.PI / 180) * moveOptions.angle.offset;\n        const range = {\n            left: radOffset - rad / 2,\n            right: radOffset + rad / 2,\n        };\n        if (!moveOptions.straight) {\n            res.angle += (0, Utils_1.randomInRange)((0, Utils_1.setRangeValue)(range.left, range.right));\n        }\n        if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n            res.length *= Math.random();\n        }\n        return res;\n    }\n    loadShapeData(shapeOptions, reduceDuplicates) {\n        const shapeData = shapeOptions.options[this.shape];\n        if (shapeData) {\n            return (0, Utils_1.deepExtend)({}, shapeData instanceof Array ? (0, Utils_1.itemFromArray)(shapeData, this.id, reduceDuplicates) : shapeData);\n        }\n    }\n    loadLife() {\n        const container = this.container;\n        const particlesOptions = this.options;\n        const lifeOptions = particlesOptions.life;\n        const life = {\n            delay: container.retina.reduceFactor\n                ? (((0, Utils_1.getRangeValue)(lifeOptions.delay.value) * (lifeOptions.delay.sync ? 1 : Math.random())) /\n                    container.retina.reduceFactor) *\n                    1000\n                : 0,\n            delayTime: 0,\n            duration: container.retina.reduceFactor\n                ? (((0, Utils_1.getRangeValue)(lifeOptions.duration.value) * (lifeOptions.duration.sync ? 1 : Math.random())) /\n                    container.retina.reduceFactor) *\n                    1000\n                : 0,\n            time: 0,\n            count: particlesOptions.life.count,\n        };\n        if (life.duration <= 0) {\n            life.duration = -1;\n        }\n        if (life.count <= 0) {\n            life.count = -1;\n        }\n        return life;\n    }\n}\nexports.Particle = Particle;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}