{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.segmentBounce = exports.calcClosestPtOnSegment = exports.parsePaths = exports.drawPolygonMaskPath = exports.drawPolygonMask = void 0;\nconst Utils_1 = require(\"../../Utils\");\nfunction drawPolygonMask(context, rawData, stroke) {\n  const color = (0, Utils_1.colorToRgb)(stroke.color);\n  if (!color) {\n    return;\n  }\n  context.beginPath();\n  context.moveTo(rawData[0].x, rawData[0].y);\n  for (const item of rawData) {\n    context.lineTo(item.x, item.y);\n  }\n  context.closePath();\n  context.strokeStyle = (0, Utils_1.getStyleFromRgb)(color);\n  context.lineWidth = stroke.width;\n  context.stroke();\n}\nexports.drawPolygonMask = drawPolygonMask;\nfunction drawPolygonMaskPath(context, path, stroke, position) {\n  context.translate(position.x, position.y);\n  const color = (0, Utils_1.colorToRgb)(stroke.color);\n  if (!color) {\n    return;\n  }\n  context.strokeStyle = (0, Utils_1.getStyleFromRgb)(color, stroke.opacity);\n  context.lineWidth = stroke.width;\n  context.stroke(path);\n}\nexports.drawPolygonMaskPath = drawPolygonMaskPath;\nfunction parsePaths(paths, scale, offset) {\n  var _a;\n  const res = [];\n  for (const path of paths) {\n    const segments = path.element.pathSegList;\n    const len = (_a = segments === null || segments === void 0 ? void 0 : segments.numberOfItems) !== null && _a !== void 0 ? _a : 0;\n    const p = {\n      x: 0,\n      y: 0\n    };\n    for (let i = 0; i < len; i++) {\n      const segment = segments === null || segments === void 0 ? void 0 : segments.getItem(i);\n      const svgPathSeg = window.SVGPathSeg;\n      switch (segment === null || segment === void 0 ? void 0 : segment.pathSegType) {\n        case svgPathSeg.PATHSEG_MOVETO_ABS:\n        case svgPathSeg.PATHSEG_LINETO_ABS:\n        case svgPathSeg.PATHSEG_CURVETO_CUBIC_ABS:\n        case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS:\n        case svgPathSeg.PATHSEG_ARC_ABS:\n        case svgPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS:\n        case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS:\n          {\n            const absSeg = segment;\n            p.x = absSeg.x;\n            p.y = absSeg.y;\n            break;\n          }\n        case svgPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS:\n          p.x = segment.x;\n          break;\n        case svgPathSeg.PATHSEG_LINETO_VERTICAL_ABS:\n          p.y = segment.y;\n          break;\n        case svgPathSeg.PATHSEG_LINETO_REL:\n        case svgPathSeg.PATHSEG_MOVETO_REL:\n        case svgPathSeg.PATHSEG_CURVETO_CUBIC_REL:\n        case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_REL:\n        case svgPathSeg.PATHSEG_ARC_REL:\n        case svgPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL:\n        case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL:\n          {\n            const relSeg = segment;\n            p.x += relSeg.x;\n            p.y += relSeg.y;\n            break;\n          }\n        case svgPathSeg.PATHSEG_LINETO_HORIZONTAL_REL:\n          p.x += segment.x;\n          break;\n        case svgPathSeg.PATHSEG_LINETO_VERTICAL_REL:\n          p.y += segment.y;\n          break;\n        case svgPathSeg.PATHSEG_UNKNOWN:\n        case svgPathSeg.PATHSEG_CLOSEPATH:\n          continue;\n      }\n      res.push({\n        x: p.x * scale + offset.x,\n        y: p.y * scale + offset.y\n      });\n    }\n  }\n  return res;\n}\nexports.parsePaths = parsePaths;\nfunction calcClosestPtOnSegment(s1, s2, pos) {\n  const {\n    dx,\n    dy\n  } = (0, Utils_1.getDistances)(pos, s1);\n  const {\n    dx: dxx,\n    dy: dyy\n  } = (0, Utils_1.getDistances)(s2, s1);\n  const t = (dx * dxx + dy * dyy) / (dxx ** 2 + dyy ** 2);\n  let x = s1.x + dxx * t;\n  let y = s1.y + dyy * t;\n  if (t < 0) {\n    x = s1.x;\n    y = s1.y;\n  } else if (t > 1) {\n    x = s2.x;\n    y = s2.y;\n  }\n  return {\n    x: x,\n    y: y,\n    isOnSegment: t >= 0 && t <= 1\n  };\n}\nexports.calcClosestPtOnSegment = calcClosestPtOnSegment;\nfunction segmentBounce(start, stop, velocity) {\n  const {\n    dx,\n    dy\n  } = (0, Utils_1.getDistances)(start, stop);\n  const wallAngle = Math.atan2(dy, dx);\n  const wallNormalX = Math.sin(wallAngle);\n  const wallNormalY = -Math.cos(wallAngle);\n  const d = 2 * (velocity.x * wallNormalX + velocity.y * wallNormalY);\n  velocity.x -= d * wallNormalX;\n  velocity.y -= d * wallNormalY;\n}\nexports.segmentBounce = segmentBounce;","map":{"version":3,"names":["Object","defineProperty","exports","value","segmentBounce","calcClosestPtOnSegment","parsePaths","drawPolygonMaskPath","drawPolygonMask","Utils_1","require","context","rawData","stroke","color","colorToRgb","beginPath","moveTo","x","y","item","lineTo","closePath","strokeStyle","getStyleFromRgb","lineWidth","width","path","position","translate","opacity","paths","scale","offset","_a","res","segments","element","pathSegList","len","numberOfItems","p","i","segment","getItem","svgPathSeg","window","SVGPathSeg","pathSegType","PATHSEG_MOVETO_ABS","PATHSEG_LINETO_ABS","PATHSEG_CURVETO_CUBIC_ABS","PATHSEG_CURVETO_QUADRATIC_ABS","PATHSEG_ARC_ABS","PATHSEG_CURVETO_CUBIC_SMOOTH_ABS","PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS","absSeg","PATHSEG_LINETO_HORIZONTAL_ABS","PATHSEG_LINETO_VERTICAL_ABS","PATHSEG_LINETO_REL","PATHSEG_MOVETO_REL","PATHSEG_CURVETO_CUBIC_REL","PATHSEG_CURVETO_QUADRATIC_REL","PATHSEG_ARC_REL","PATHSEG_CURVETO_CUBIC_SMOOTH_REL","PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL","relSeg","PATHSEG_LINETO_HORIZONTAL_REL","PATHSEG_LINETO_VERTICAL_REL","PATHSEG_UNKNOWN","PATHSEG_CLOSEPATH","push","s1","s2","pos","dx","dy","getDistances","dxx","dyy","t","isOnSegment","start","stop","velocity","wallAngle","Math","atan2","wallNormalX","sin","wallNormalY","cos","d"],"sources":["C:/Users/peswa/Desktop/portfolio/My-portfolio/node_modules/tsparticles/Plugins/PolygonMask/utils.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.segmentBounce = exports.calcClosestPtOnSegment = exports.parsePaths = exports.drawPolygonMaskPath = exports.drawPolygonMask = void 0;\nconst Utils_1 = require(\"../../Utils\");\nfunction drawPolygonMask(context, rawData, stroke) {\n    const color = (0, Utils_1.colorToRgb)(stroke.color);\n    if (!color) {\n        return;\n    }\n    context.beginPath();\n    context.moveTo(rawData[0].x, rawData[0].y);\n    for (const item of rawData) {\n        context.lineTo(item.x, item.y);\n    }\n    context.closePath();\n    context.strokeStyle = (0, Utils_1.getStyleFromRgb)(color);\n    context.lineWidth = stroke.width;\n    context.stroke();\n}\nexports.drawPolygonMask = drawPolygonMask;\nfunction drawPolygonMaskPath(context, path, stroke, position) {\n    context.translate(position.x, position.y);\n    const color = (0, Utils_1.colorToRgb)(stroke.color);\n    if (!color) {\n        return;\n    }\n    context.strokeStyle = (0, Utils_1.getStyleFromRgb)(color, stroke.opacity);\n    context.lineWidth = stroke.width;\n    context.stroke(path);\n}\nexports.drawPolygonMaskPath = drawPolygonMaskPath;\nfunction parsePaths(paths, scale, offset) {\n    var _a;\n    const res = [];\n    for (const path of paths) {\n        const segments = path.element.pathSegList;\n        const len = (_a = segments === null || segments === void 0 ? void 0 : segments.numberOfItems) !== null && _a !== void 0 ? _a : 0;\n        const p = {\n            x: 0,\n            y: 0,\n        };\n        for (let i = 0; i < len; i++) {\n            const segment = segments === null || segments === void 0 ? void 0 : segments.getItem(i);\n            const svgPathSeg = window.SVGPathSeg;\n            switch (segment === null || segment === void 0 ? void 0 : segment.pathSegType) {\n                case svgPathSeg.PATHSEG_MOVETO_ABS:\n                case svgPathSeg.PATHSEG_LINETO_ABS:\n                case svgPathSeg.PATHSEG_CURVETO_CUBIC_ABS:\n                case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS:\n                case svgPathSeg.PATHSEG_ARC_ABS:\n                case svgPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS:\n                case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS: {\n                    const absSeg = segment;\n                    p.x = absSeg.x;\n                    p.y = absSeg.y;\n                    break;\n                }\n                case svgPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS:\n                    p.x = segment.x;\n                    break;\n                case svgPathSeg.PATHSEG_LINETO_VERTICAL_ABS:\n                    p.y = segment.y;\n                    break;\n                case svgPathSeg.PATHSEG_LINETO_REL:\n                case svgPathSeg.PATHSEG_MOVETO_REL:\n                case svgPathSeg.PATHSEG_CURVETO_CUBIC_REL:\n                case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_REL:\n                case svgPathSeg.PATHSEG_ARC_REL:\n                case svgPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL:\n                case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL: {\n                    const relSeg = segment;\n                    p.x += relSeg.x;\n                    p.y += relSeg.y;\n                    break;\n                }\n                case svgPathSeg.PATHSEG_LINETO_HORIZONTAL_REL:\n                    p.x += segment.x;\n                    break;\n                case svgPathSeg.PATHSEG_LINETO_VERTICAL_REL:\n                    p.y += segment.y;\n                    break;\n                case svgPathSeg.PATHSEG_UNKNOWN:\n                case svgPathSeg.PATHSEG_CLOSEPATH:\n                    continue;\n            }\n            res.push({\n                x: p.x * scale + offset.x,\n                y: p.y * scale + offset.y,\n            });\n        }\n    }\n    return res;\n}\nexports.parsePaths = parsePaths;\nfunction calcClosestPtOnSegment(s1, s2, pos) {\n    const { dx, dy } = (0, Utils_1.getDistances)(pos, s1);\n    const { dx: dxx, dy: dyy } = (0, Utils_1.getDistances)(s2, s1);\n    const t = (dx * dxx + dy * dyy) / (dxx ** 2 + dyy ** 2);\n    let x = s1.x + dxx * t;\n    let y = s1.y + dyy * t;\n    if (t < 0) {\n        x = s1.x;\n        y = s1.y;\n    }\n    else if (t > 1) {\n        x = s2.x;\n        y = s2.y;\n    }\n    return { x: x, y: y, isOnSegment: t >= 0 && t <= 1 };\n}\nexports.calcClosestPtOnSegment = calcClosestPtOnSegment;\nfunction segmentBounce(start, stop, velocity) {\n    const { dx, dy } = (0, Utils_1.getDistances)(start, stop);\n    const wallAngle = Math.atan2(dy, dx);\n    const wallNormalX = Math.sin(wallAngle);\n    const wallNormalY = -Math.cos(wallAngle);\n    const d = 2 * (velocity.x * wallNormalX + velocity.y * wallNormalY);\n    velocity.x -= d * wallNormalX;\n    velocity.y -= d * wallNormalY;\n}\nexports.segmentBounce = segmentBounce;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}