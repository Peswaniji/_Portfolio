{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Particles = void 0;\nconst Particle_1 = require(\"./Particle\");\nconst Utils_1 = require(\"../Utils\");\nconst InteractionManager_1 = require(\"./InteractionManager\");\nconst ParticlesOptions_1 = require(\"../Options/Classes/Particles/ParticlesOptions\");\nconst Mover_1 = require(\"./Particle/Mover\");\nclass Particles {\n  constructor(container) {\n    this.container = container;\n    this.nextId = 0;\n    this.array = [];\n    this.zArray = [];\n    this.mover = new Mover_1.Mover(container);\n    this.limit = 0;\n    this.needsSort = false;\n    this.lastZIndex = 0;\n    this.freqs = {\n      links: new Map(),\n      triangles: new Map()\n    };\n    this.interactionManager = new InteractionManager_1.InteractionManager(container);\n    const canvasSize = this.container.canvas.size;\n    this.linksColors = new Map();\n    this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, canvasSize.width * 3 / 2, canvasSize.height * 3 / 2), 4);\n    this.updaters = Utils_1.Plugins.getUpdaters(container, true);\n  }\n  get count() {\n    return this.array.length;\n  }\n  init() {\n    var _a;\n    const container = this.container;\n    const options = container.actualOptions;\n    this.lastZIndex = 0;\n    this.needsSort = false;\n    this.freqs.links = new Map();\n    this.freqs.triangles = new Map();\n    let handled = false;\n    this.updaters = Utils_1.Plugins.getUpdaters(container, true);\n    this.interactionManager.init();\n    for (const [, plugin] of container.plugins) {\n      if (plugin.particlesInitialization !== undefined) {\n        handled = plugin.particlesInitialization();\n      }\n      if (handled) {\n        break;\n      }\n    }\n    this.addManualParticles();\n    if (!handled) {\n      for (const group in options.particles.groups) {\n        const groupOptions = options.particles.groups[group];\n        for (let i = this.count, j = 0; j < ((_a = groupOptions.number) === null || _a === void 0 ? void 0 : _a.value) && i < options.particles.number.value; i++, j++) {\n          this.addParticle(undefined, groupOptions, group);\n        }\n      }\n      for (let i = this.count; i < options.particles.number.value; i++) {\n        this.addParticle();\n      }\n    }\n    container.pathGenerator.init(container);\n  }\n  redraw() {\n    this.clear();\n    this.init();\n    this.draw({\n      value: 0,\n      factor: 0\n    });\n  }\n  removeAt(index, quantity = 1, group, override) {\n    if (!(index >= 0 && index <= this.count)) {\n      return;\n    }\n    let deleted = 0;\n    for (let i = index; deleted < quantity && i < this.count; i++) {\n      const particle = this.array[i];\n      if (!particle || particle.group !== group) {\n        continue;\n      }\n      particle.destroy(override);\n      this.array.splice(i--, 1);\n      const zIdx = this.zArray.indexOf(particle);\n      this.zArray.splice(zIdx, 1);\n      deleted++;\n    }\n  }\n  remove(particle, group, override) {\n    this.removeAt(this.array.indexOf(particle), undefined, group, override);\n  }\n  update(delta) {\n    const container = this.container;\n    const particlesToDelete = [];\n    container.pathGenerator.update();\n    for (const [, plugin] of container.plugins) {\n      if (plugin.update !== undefined) {\n        plugin.update(delta);\n      }\n    }\n    for (const particle of this.array) {\n      const resizeFactor = container.canvas.resizeFactor;\n      if (resizeFactor) {\n        particle.position.x *= resizeFactor.width;\n        particle.position.y *= resizeFactor.height;\n      }\n      particle.bubble.inRange = false;\n      for (const [, plugin] of this.container.plugins) {\n        if (particle.destroyed) {\n          break;\n        }\n        if (plugin.particleUpdate) {\n          plugin.particleUpdate(particle, delta);\n        }\n      }\n      this.mover.move(particle, delta);\n      if (particle.destroyed) {\n        particlesToDelete.push(particle);\n        continue;\n      }\n      this.quadTree.insert(new Utils_1.Point(particle.getPosition(), particle));\n    }\n    for (const particle of particlesToDelete) {\n      this.remove(particle);\n    }\n    this.interactionManager.externalInteract(delta);\n    for (const particle of container.particles.array) {\n      for (const updater of this.updaters) {\n        updater.update(particle, delta);\n      }\n      if (!particle.destroyed && !particle.spawning) {\n        this.interactionManager.particlesInteract(particle, delta);\n      }\n    }\n    delete container.canvas.resizeFactor;\n  }\n  draw(delta) {\n    const container = this.container;\n    container.canvas.clear();\n    const canvasSize = this.container.canvas.size;\n    this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, canvasSize.width * 3 / 2, canvasSize.height * 3 / 2), 4);\n    this.update(delta);\n    if (this.needsSort) {\n      this.zArray.sort((a, b) => b.position.z - a.position.z || a.id - b.id);\n      this.lastZIndex = this.zArray[this.zArray.length - 1].position.z;\n      this.needsSort = false;\n    }\n    for (const [, plugin] of container.plugins) {\n      container.canvas.drawPlugin(plugin, delta);\n    }\n    for (const p of this.zArray) {\n      p.draw(delta);\n    }\n  }\n  clear() {\n    this.array = [];\n    this.zArray = [];\n  }\n  push(nb, mouse, overrideOptions, group) {\n    this.pushing = true;\n    for (let i = 0; i < nb; i++) {\n      this.addParticle(mouse === null || mouse === void 0 ? void 0 : mouse.position, overrideOptions, group);\n    }\n    this.pushing = false;\n  }\n  addParticle(position, overrideOptions, group) {\n    const container = this.container;\n    const options = container.actualOptions;\n    const limit = options.particles.number.limit * container.density;\n    if (limit > 0) {\n      const countToRemove = this.count + 1 - limit;\n      if (countToRemove > 0) {\n        this.removeQuantity(countToRemove);\n      }\n    }\n    return this.pushParticle(position, overrideOptions, group);\n  }\n  addSplitParticle(parent) {\n    const splitOptions = parent.options.destroy.split;\n    const options = new ParticlesOptions_1.ParticlesOptions();\n    options.load(parent.options);\n    const factor = (0, Utils_1.getRangeValue)(splitOptions.factor.value);\n    options.color.load({\n      value: {\n        hsl: parent.getFillColor()\n      }\n    });\n    if (typeof options.size.value === \"number\") {\n      options.size.value /= factor;\n    } else {\n      options.size.value.min /= factor;\n      options.size.value.max /= factor;\n    }\n    options.load(splitOptions.particles);\n    const offset = splitOptions.sizeOffset ? (0, Utils_1.setRangeValue)(-parent.size.value, parent.size.value) : 0;\n    const position = {\n      x: parent.position.x + (0, Utils_1.randomInRange)(offset),\n      y: parent.position.y + (0, Utils_1.randomInRange)(offset)\n    };\n    return this.pushParticle(position, options, parent.group, particle => {\n      if (particle.size.value < 0.5) {\n        return false;\n      }\n      particle.velocity.length = (0, Utils_1.randomInRange)((0, Utils_1.setRangeValue)(parent.velocity.length, particle.velocity.length));\n      particle.splitCount = parent.splitCount + 1;\n      particle.unbreakable = true;\n      setTimeout(() => {\n        particle.unbreakable = false;\n      }, 500);\n      return true;\n    });\n  }\n  removeQuantity(quantity, group) {\n    this.removeAt(0, quantity, group);\n  }\n  getLinkFrequency(p1, p2) {\n    const key = `${Math.min(p1.id, p2.id)}_${Math.max(p1.id, p2.id)}`;\n    let res = this.freqs.links.get(key);\n    if (res === undefined) {\n      res = Math.random();\n      this.freqs.links.set(key, res);\n    }\n    return res;\n  }\n  getTriangleFrequency(p1, p2, p3) {\n    let [id1, id2, id3] = [p1.id, p2.id, p3.id];\n    if (id1 > id2) {\n      [id2, id1] = [id1, id2];\n    }\n    if (id2 > id3) {\n      [id3, id2] = [id2, id3];\n    }\n    if (id1 > id3) {\n      [id3, id1] = [id1, id3];\n    }\n    const key = `${id1}_${id2}_${id3}`;\n    let res = this.freqs.triangles.get(key);\n    if (res === undefined) {\n      res = Math.random();\n      this.freqs.triangles.set(key, res);\n    }\n    return res;\n  }\n  addManualParticles() {\n    const container = this.container;\n    const options = container.actualOptions;\n    for (const particle of options.manualParticles) {\n      const pos = particle.position ? {\n        x: particle.position.x * container.canvas.size.width / 100,\n        y: particle.position.y * container.canvas.size.height / 100\n      } : undefined;\n      this.addParticle(pos, particle.options);\n    }\n  }\n  setDensity() {\n    const options = this.container.actualOptions;\n    for (const group in options.particles.groups) {\n      this.applyDensity(options.particles.groups[group], 0, group);\n    }\n    this.applyDensity(options.particles, options.manualParticles.length);\n  }\n  applyDensity(options, manualCount, group) {\n    var _a;\n    if (!((_a = options.number.density) === null || _a === void 0 ? void 0 : _a.enable)) {\n      return;\n    }\n    const numberOptions = options.number;\n    const densityFactor = this.initDensityFactor(numberOptions.density);\n    const optParticlesNumber = numberOptions.value;\n    const optParticlesLimit = numberOptions.limit > 0 ? numberOptions.limit : optParticlesNumber;\n    const particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * densityFactor + manualCount;\n    const particlesCount = Math.min(this.count, this.array.filter(t => t.group === group).length);\n    this.limit = numberOptions.limit * densityFactor;\n    if (particlesCount < particlesNumber) {\n      this.push(Math.abs(particlesNumber - particlesCount), undefined, options, group);\n    } else if (particlesCount > particlesNumber) {\n      this.removeQuantity(particlesCount - particlesNumber, group);\n    }\n  }\n  initDensityFactor(densityOptions) {\n    const container = this.container;\n    if (!container.canvas.element || !densityOptions.enable) {\n      return 1;\n    }\n    const canvas = container.canvas.element;\n    const pxRatio = container.retina.pixelRatio;\n    return canvas.width * canvas.height / (densityOptions.factor * pxRatio ** 2 * densityOptions.area);\n  }\n  pushParticle(position, overrideOptions, group, initializer) {\n    try {\n      const particle = new Particle_1.Particle(this.nextId, this.container, position, overrideOptions, group);\n      let canAdd = true;\n      if (initializer) {\n        canAdd = initializer(particle);\n      }\n      if (!canAdd) {\n        return;\n      }\n      this.array.push(particle);\n      this.zArray.push(particle);\n      this.nextId++;\n      return particle;\n    } catch (e) {\n      console.warn(`error adding particle: ${e}`);\n      return;\n    }\n  }\n}\nexports.Particles = Particles;","map":{"version":3,"names":["Object","defineProperty","exports","value","Particles","Particle_1","require","Utils_1","InteractionManager_1","ParticlesOptions_1","Mover_1","constructor","container","nextId","array","zArray","mover","Mover","limit","needsSort","lastZIndex","freqs","links","Map","triangles","interactionManager","InteractionManager","canvasSize","canvas","size","linksColors","quadTree","QuadTree","Rectangle","width","height","updaters","Plugins","getUpdaters","count","length","init","_a","options","actualOptions","handled","plugin","plugins","particlesInitialization","undefined","addManualParticles","group","particles","groups","groupOptions","i","j","number","addParticle","pathGenerator","redraw","clear","draw","factor","removeAt","index","quantity","override","deleted","particle","destroy","splice","zIdx","indexOf","remove","update","delta","particlesToDelete","resizeFactor","position","x","y","bubble","inRange","destroyed","particleUpdate","move","push","insert","Point","getPosition","externalInteract","updater","spawning","particlesInteract","sort","a","b","z","id","drawPlugin","p","nb","mouse","overrideOptions","pushing","density","countToRemove","removeQuantity","pushParticle","addSplitParticle","parent","splitOptions","split","ParticlesOptions","load","getRangeValue","color","hsl","getFillColor","min","max","offset","sizeOffset","setRangeValue","randomInRange","velocity","splitCount","unbreakable","setTimeout","getLinkFrequency","p1","p2","key","Math","res","get","random","set","getTriangleFrequency","p3","id1","id2","id3","manualParticles","pos","setDensity","applyDensity","manualCount","enable","numberOptions","densityFactor","initDensityFactor","optParticlesNumber","optParticlesLimit","particlesNumber","particlesCount","filter","t","abs","densityOptions","element","pxRatio","retina","pixelRatio","area","initializer","Particle","canAdd","e","console","warn"],"sources":["C:/Users/peswa/Desktop/portfolio/My-portfolio/node_modules/tsparticles/Core/Particles.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Particles = void 0;\nconst Particle_1 = require(\"./Particle\");\nconst Utils_1 = require(\"../Utils\");\nconst InteractionManager_1 = require(\"./InteractionManager\");\nconst ParticlesOptions_1 = require(\"../Options/Classes/Particles/ParticlesOptions\");\nconst Mover_1 = require(\"./Particle/Mover\");\nclass Particles {\n    constructor(container) {\n        this.container = container;\n        this.nextId = 0;\n        this.array = [];\n        this.zArray = [];\n        this.mover = new Mover_1.Mover(container);\n        this.limit = 0;\n        this.needsSort = false;\n        this.lastZIndex = 0;\n        this.freqs = {\n            links: new Map(),\n            triangles: new Map(),\n        };\n        this.interactionManager = new InteractionManager_1.InteractionManager(container);\n        const canvasSize = this.container.canvas.size;\n        this.linksColors = new Map();\n        this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, (canvasSize.width * 3) / 2, (canvasSize.height * 3) / 2), 4);\n        this.updaters = Utils_1.Plugins.getUpdaters(container, true);\n    }\n    get count() {\n        return this.array.length;\n    }\n    init() {\n        var _a;\n        const container = this.container;\n        const options = container.actualOptions;\n        this.lastZIndex = 0;\n        this.needsSort = false;\n        this.freqs.links = new Map();\n        this.freqs.triangles = new Map();\n        let handled = false;\n        this.updaters = Utils_1.Plugins.getUpdaters(container, true);\n        this.interactionManager.init();\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particlesInitialization !== undefined) {\n                handled = plugin.particlesInitialization();\n            }\n            if (handled) {\n                break;\n            }\n        }\n        this.addManualParticles();\n        if (!handled) {\n            for (const group in options.particles.groups) {\n                const groupOptions = options.particles.groups[group];\n                for (let i = this.count, j = 0; j < ((_a = groupOptions.number) === null || _a === void 0 ? void 0 : _a.value) && i < options.particles.number.value; i++, j++) {\n                    this.addParticle(undefined, groupOptions, group);\n                }\n            }\n            for (let i = this.count; i < options.particles.number.value; i++) {\n                this.addParticle();\n            }\n        }\n        container.pathGenerator.init(container);\n    }\n    redraw() {\n        this.clear();\n        this.init();\n        this.draw({ value: 0, factor: 0 });\n    }\n    removeAt(index, quantity = 1, group, override) {\n        if (!(index >= 0 && index <= this.count)) {\n            return;\n        }\n        let deleted = 0;\n        for (let i = index; deleted < quantity && i < this.count; i++) {\n            const particle = this.array[i];\n            if (!particle || particle.group !== group) {\n                continue;\n            }\n            particle.destroy(override);\n            this.array.splice(i--, 1);\n            const zIdx = this.zArray.indexOf(particle);\n            this.zArray.splice(zIdx, 1);\n            deleted++;\n        }\n    }\n    remove(particle, group, override) {\n        this.removeAt(this.array.indexOf(particle), undefined, group, override);\n    }\n    update(delta) {\n        const container = this.container;\n        const particlesToDelete = [];\n        container.pathGenerator.update();\n        for (const [, plugin] of container.plugins) {\n            if (plugin.update !== undefined) {\n                plugin.update(delta);\n            }\n        }\n        for (const particle of this.array) {\n            const resizeFactor = container.canvas.resizeFactor;\n            if (resizeFactor) {\n                particle.position.x *= resizeFactor.width;\n                particle.position.y *= resizeFactor.height;\n            }\n            particle.bubble.inRange = false;\n            for (const [, plugin] of this.container.plugins) {\n                if (particle.destroyed) {\n                    break;\n                }\n                if (plugin.particleUpdate) {\n                    plugin.particleUpdate(particle, delta);\n                }\n            }\n            this.mover.move(particle, delta);\n            if (particle.destroyed) {\n                particlesToDelete.push(particle);\n                continue;\n            }\n            this.quadTree.insert(new Utils_1.Point(particle.getPosition(), particle));\n        }\n        for (const particle of particlesToDelete) {\n            this.remove(particle);\n        }\n        this.interactionManager.externalInteract(delta);\n        for (const particle of container.particles.array) {\n            for (const updater of this.updaters) {\n                updater.update(particle, delta);\n            }\n            if (!particle.destroyed && !particle.spawning) {\n                this.interactionManager.particlesInteract(particle, delta);\n            }\n        }\n        delete container.canvas.resizeFactor;\n    }\n    draw(delta) {\n        const container = this.container;\n        container.canvas.clear();\n        const canvasSize = this.container.canvas.size;\n        this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, (canvasSize.width * 3) / 2, (canvasSize.height * 3) / 2), 4);\n        this.update(delta);\n        if (this.needsSort) {\n            this.zArray.sort((a, b) => b.position.z - a.position.z || a.id - b.id);\n            this.lastZIndex = this.zArray[this.zArray.length - 1].position.z;\n            this.needsSort = false;\n        }\n        for (const [, plugin] of container.plugins) {\n            container.canvas.drawPlugin(plugin, delta);\n        }\n        for (const p of this.zArray) {\n            p.draw(delta);\n        }\n    }\n    clear() {\n        this.array = [];\n        this.zArray = [];\n    }\n    push(nb, mouse, overrideOptions, group) {\n        this.pushing = true;\n        for (let i = 0; i < nb; i++) {\n            this.addParticle(mouse === null || mouse === void 0 ? void 0 : mouse.position, overrideOptions, group);\n        }\n        this.pushing = false;\n    }\n    addParticle(position, overrideOptions, group) {\n        const container = this.container;\n        const options = container.actualOptions;\n        const limit = options.particles.number.limit * container.density;\n        if (limit > 0) {\n            const countToRemove = this.count + 1 - limit;\n            if (countToRemove > 0) {\n                this.removeQuantity(countToRemove);\n            }\n        }\n        return this.pushParticle(position, overrideOptions, group);\n    }\n    addSplitParticle(parent) {\n        const splitOptions = parent.options.destroy.split;\n        const options = new ParticlesOptions_1.ParticlesOptions();\n        options.load(parent.options);\n        const factor = (0, Utils_1.getRangeValue)(splitOptions.factor.value);\n        options.color.load({\n            value: {\n                hsl: parent.getFillColor(),\n            },\n        });\n        if (typeof options.size.value === \"number\") {\n            options.size.value /= factor;\n        }\n        else {\n            options.size.value.min /= factor;\n            options.size.value.max /= factor;\n        }\n        options.load(splitOptions.particles);\n        const offset = splitOptions.sizeOffset ? (0, Utils_1.setRangeValue)(-parent.size.value, parent.size.value) : 0;\n        const position = {\n            x: parent.position.x + (0, Utils_1.randomInRange)(offset),\n            y: parent.position.y + (0, Utils_1.randomInRange)(offset),\n        };\n        return this.pushParticle(position, options, parent.group, (particle) => {\n            if (particle.size.value < 0.5) {\n                return false;\n            }\n            particle.velocity.length = (0, Utils_1.randomInRange)((0, Utils_1.setRangeValue)(parent.velocity.length, particle.velocity.length));\n            particle.splitCount = parent.splitCount + 1;\n            particle.unbreakable = true;\n            setTimeout(() => {\n                particle.unbreakable = false;\n            }, 500);\n            return true;\n        });\n    }\n    removeQuantity(quantity, group) {\n        this.removeAt(0, quantity, group);\n    }\n    getLinkFrequency(p1, p2) {\n        const key = `${Math.min(p1.id, p2.id)}_${Math.max(p1.id, p2.id)}`;\n        let res = this.freqs.links.get(key);\n        if (res === undefined) {\n            res = Math.random();\n            this.freqs.links.set(key, res);\n        }\n        return res;\n    }\n    getTriangleFrequency(p1, p2, p3) {\n        let [id1, id2, id3] = [p1.id, p2.id, p3.id];\n        if (id1 > id2) {\n            [id2, id1] = [id1, id2];\n        }\n        if (id2 > id3) {\n            [id3, id2] = [id2, id3];\n        }\n        if (id1 > id3) {\n            [id3, id1] = [id1, id3];\n        }\n        const key = `${id1}_${id2}_${id3}`;\n        let res = this.freqs.triangles.get(key);\n        if (res === undefined) {\n            res = Math.random();\n            this.freqs.triangles.set(key, res);\n        }\n        return res;\n    }\n    addManualParticles() {\n        const container = this.container;\n        const options = container.actualOptions;\n        for (const particle of options.manualParticles) {\n            const pos = particle.position\n                ? {\n                    x: (particle.position.x * container.canvas.size.width) / 100,\n                    y: (particle.position.y * container.canvas.size.height) / 100,\n                }\n                : undefined;\n            this.addParticle(pos, particle.options);\n        }\n    }\n    setDensity() {\n        const options = this.container.actualOptions;\n        for (const group in options.particles.groups) {\n            this.applyDensity(options.particles.groups[group], 0, group);\n        }\n        this.applyDensity(options.particles, options.manualParticles.length);\n    }\n    applyDensity(options, manualCount, group) {\n        var _a;\n        if (!((_a = options.number.density) === null || _a === void 0 ? void 0 : _a.enable)) {\n            return;\n        }\n        const numberOptions = options.number;\n        const densityFactor = this.initDensityFactor(numberOptions.density);\n        const optParticlesNumber = numberOptions.value;\n        const optParticlesLimit = numberOptions.limit > 0 ? numberOptions.limit : optParticlesNumber;\n        const particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * densityFactor + manualCount;\n        const particlesCount = Math.min(this.count, this.array.filter((t) => t.group === group).length);\n        this.limit = numberOptions.limit * densityFactor;\n        if (particlesCount < particlesNumber) {\n            this.push(Math.abs(particlesNumber - particlesCount), undefined, options, group);\n        }\n        else if (particlesCount > particlesNumber) {\n            this.removeQuantity(particlesCount - particlesNumber, group);\n        }\n    }\n    initDensityFactor(densityOptions) {\n        const container = this.container;\n        if (!container.canvas.element || !densityOptions.enable) {\n            return 1;\n        }\n        const canvas = container.canvas.element;\n        const pxRatio = container.retina.pixelRatio;\n        return (canvas.width * canvas.height) / (densityOptions.factor * pxRatio ** 2 * densityOptions.area);\n    }\n    pushParticle(position, overrideOptions, group, initializer) {\n        try {\n            const particle = new Particle_1.Particle(this.nextId, this.container, position, overrideOptions, group);\n            let canAdd = true;\n            if (initializer) {\n                canAdd = initializer(particle);\n            }\n            if (!canAdd) {\n                return;\n            }\n            this.array.push(particle);\n            this.zArray.push(particle);\n            this.nextId++;\n            return particle;\n        }\n        catch (e) {\n            console.warn(`error adding particle: ${e}`);\n            return;\n        }\n    }\n}\nexports.Particles = Particles;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}